I have built a MERN app with these components and utility files for a zoning map application that allows users to view, toggle, and update zoning labels on a map. The application features an autocomplete search box for selecting zoning labels more efficiently.
ZoningMap.js: This file serves as the main component for the zoning map. It imports other components like ZoningGeoJSON, ZoningToggle, and ZoneAutocomplete and manages the state for geoJsonData, showZoning, and selectedZone. It also includes the useEffect hook for fetching the GeoJSON data and sets up the MapContainer.

ZoningGeoJSON.js: This component is responsible for displaying the GeoJSON data on the map. It receives the geoJsonData, selectedZone, and setSelectedZone as props from the ZoningMap component. It contains the onFeatureClick function that updates the zoning label and style when a user clicks on a feature.

ZoningToggle.js: This component displays a toggle button that enables or disables the zoning layer on the map. It receives the showZoning and setShowZoning state from the ZoningMap component as props and toggles the state when the button is clicked.

ZoneAutocomplete.js: This component renders an autocomplete input field that allows users to search and select a zoning label from a list. It takes the zoneLabels array and the onZoneChange function as props. It uses the react-select library to implement the autocomplete functionality.

fetchGeoJSONData.js: A utility file for fetching GeoJSON data from the server. It exports a function fetchGeoJsonData that is used in the ZoningMap component to fetch and set the GeoJSON data.

zoningUtils.js: This utility file contains functions to define the style and color for the GeoJSON layer, such as getColorByLabel and geoJsonStyle.

zoningColors.js: This file is located in the constants folder and contains an object called zoningColors that maps zoning labels to their corresponding colors. The keys of this object are used as the zoneLabels array in the ZoningMap component.

flumColors.js: similar to zoningColors.js but maps FLUM labels to their corresponding colors.

BoundariesGeoJSON.js: pulls in the GeoJSON files representing ANCBoundaries and Compl Plan Boundaries

BoundariesToggle.js: Toggles the ANC and Comp Plan boundaries

Here is the file structure:
- src
    - components
        - ZoneAutocomplete.js
        - ZoningGeoJSON.js
        - ZoningMap.js
        - ZoningToggle.js
        - ANCBoundariesGeoJSON.js
        - ANCToggle.js
    - constants
        - zoningColors.js
        - flumColors.js
    - utils
        - fetchGeoJSONData.js
        - zoningUtils.js

I currently have the zoning map displayed (stored in public/zoning_map.geojson). I have the ability to change a zone. Sometimes when I'm changing a zone, I want to be able to revert back to the original zone. I don't always remember that zone though. How can I add an option to revert a zone back to what is stored in the GeoJSON?

Here are some code files in case they help. Let me know if you need others.

Code for ZoningGeoJSON.js:
// Responsible for rendering the GeoJSON layer with the zoning data. 
// It takes care of styling the zones based on their labels and handles 
// click events on each zone feature.
import React, { useRef, useEffect } from 'react';
import { GeoJSON } from 'react-leaflet';
import { geoJsonStyle } from '../utils/zoningUtils';
import { zoningColors } from '../constants/zoningColors';

const ZoningGeoJSON = ({ geoJsonData, selectedZone, setSelectedZone }) => {
    const selectedZoneRef = useRef(selectedZone); // <-- create a ref for selectedZone
  
    // Update the ref's current value whenever selectedZone changes
    useEffect(() => {
      selectedZoneRef.current = selectedZone;
    }, [selectedZone]);
  
    const onFeatureClick = (e, feature) => {
      const currentSelectedZone = selectedZoneRef.current; // <-- get the current value of the ref
      console.log('In feature click test');
      console.log(`Selected zone is ${currentSelectedZone}`);
  
      if (currentSelectedZone) {
        console.log('Changing zoning label to:', currentSelectedZone); // Add this log
        feature.properties.ZONING_LABEL = currentSelectedZone;
        e.target.setStyle(geoJsonStyle(feature, 'ZONING_LABEL', zoningColors));
        e.target.setPopupContent(`<strong>Zoning Label:</strong> ${feature.properties.ZONING_LABEL}`);
      }
    };
  
    return (
      <GeoJSON
        key="geojson-layer"
        data={geoJsonData}
        style={(feature) => geoJsonStyle(feature, 'ZONING_LABEL', zoningColors)} // Pass the property name and color mapping
        onEachFeature={(feature, layer) => {
          layer.on({
            click: (e) => onFeatureClick(e, feature),
          });
          layer.bindPopup(`<strong>Zoning Label:</strong> ${feature.properties.ZONING_LABEL}`);
        }}
      />
    );
  };
  
  export default ZoningGeoJSON;
  
  Code for ZoningMap.js:
  // ZoningMap.js
import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { fetchGeoJsonData } from '../utils/fetchGeoJSONData';
import ZoningGeoJSON from './ZoningGeoJSON';
import ZoningToggle from './ZoningToggle';
import ZoneAutocomplete from './ZoneAutocomplete';
import { zoningColors } from '../constants/zoningColors';
import BoundariesGeoJSON from './BoundariesGeoJSON';
import BoundariesToggle from './BoundariesToggle';
import { onEachFeature } from '../utils/popupUtils';

const ZoningMap = () => {
  const [geoJsonData, setGeoJsonData] = useState(null);
  const [showZoning, setShowZoning] = useState(true);
  const [selectedZone, setSelectedZone] = useState(null);
  const [map, setMap] = useState(null);
  const zoneLabels = Object.keys(zoningColors);
  const [showANC, setShowANC] = useState(true);
  const [ancData, setAncData] = useState(null);
  const [showCompPlan, setShowCompPlan] = useState(true);
  const [compPlanData, setCompPlanData] = useState(null);

  useEffect(() => {
    fetchGeoJsonData('/datasets/zoning_map.geojson').then((data) => {
      setGeoJsonData(data);
    });

    fetchGeoJsonData('/datasets/Advisory_Neighborhood_Commissions_from_2023.geojson').then((data) => {
      setAncData(data);
      console.log('ANC Data:', data); // Log the ANC data
    });

    fetchGeoJsonData('/datasets/Comprehensive_Plan_Planning_Areas.geojson').then((data) => {
      setCompPlanData(data);
      console.log('Comp Plan Data:', data); // Log the Comp Plan data
    });
  }, []);

  return (
    <div style={{ position: 'relative', height: '100vh' }}>
      <MapContainer 
        center={[38.9, -77.02]} 
        zoom={13} 
        style={{ height: '100%' }}
        whenCreated={setMap}
        >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        {geoJsonData && (
          <>
            {showZoning && (
              <ZoningGeoJSON
                geoJsonData={geoJsonData}
                selectedZone={selectedZone}
                setSelectedZone={setSelectedZone}
                zoningColors={zoningColors}
                onEachFeature={onEachFeature(ancData, compPlanData)}
              />
            )}
            {showANC && ancData && (
              <BoundariesGeoJSON
                geoJsonData={ancData}
                color="red"
              />
            )}
            <BoundariesToggle
              showBoundaries={showANC}
              setShowBoundaries={setShowANC}
              label="ANC"
              style={{ top: '40px', right: '10px' }}
            />
            {showCompPlan && compPlanData && (
              <BoundariesGeoJSON
                geoJsonData={compPlanData}
                color="blue"
              />
            )}
            <BoundariesToggle
              showBoundaries={showCompPlan}
              setShowBoundaries={setShowCompPlan}
              label="Comp Plan"
              style={{ top: '70px', right: '10px' }}
            />
            <ZoningToggle showZoning={showZoning} setShowZoning={setShowZoning} />
            <ZoneAutocomplete
              zoneLabels={zoneLabels}
              onZoneChange={(selectedZone) => setSelectedZone(selectedZone)}
              map={map}
            />
          </>
        )}
      </MapContainer>
    </div>
  );
};

export default ZoningMap;
